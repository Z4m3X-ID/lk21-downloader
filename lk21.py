import base64
exec(base64.b64decode('aW1wb3J0IHJlcXVlc3RzLHJlLG9zLGpzb24sY2xpY2ssc3lzLGxvZ2dpbmcKZnJvbSBiczQgaW1wb3J0IEJlYXV0aWZ1bFNvdXAgYXMgQnMKZnJvbSB0cWRtIGltcG9ydCB0cWRtCmZyb20gcmVxdWVzdHMuYWRhcHRlcnMgaW1wb3J0IEhUVFBBZGFwdGVyCmZyb20gcmVxdWVzdHMucGFja2FnZXMudXJsbGliMy51dGlsLnJldHJ5IGltcG9ydCBSZXRyeQoKbG9nZ2luZy5iYXNpY0NvbmZpZyhsZXZlbD1sb2dnaW5nLklORk8pCnNlcz1yZXF1ZXN0cy5TZXNzaW9uKCkKcmV0cmllcyA9IFJldHJ5KHRvdGFsPTUsIGJhY2tvZmZfZmFjdG9yPTEsIHN0YXR1c19mb3JjZWxpc3Q9WyA1MDIsIDUwMywgNTA0LCAxMDMgXSkKc2VzLm1vdW50KCdodHRwOi8vJywgSFRUUEFkYXB0ZXIobWF4X3JldHJpZXM9cmV0cmllcykpCnNlcy5tb3VudCgnaHR0cHM6Ly8nLCBIVFRQQWRhcHRlcihtYXhfcmV0cmllcz1yZXRyaWVzKSkKaW5mbz17CiAgJ3RpdGxlJzpbXSwKfQoKZGVmIHNlYXJjaChxdWVyeSk6CiAgZ2xvYmFsIHBpbAogIGM9MQogIHJlcT1zZXMuZ2V0KCdodHRwOi8vMTQ5LjU2LjI0LjIyNi8/cz0nK3F1ZXJ5KQogIGJzPUJzKHJlcS50ZXh0LCAnaHRtbC5wYXJzZXInKQogIGhzbD1icy5maW5kX2FsbCgnZGl2Jyx7J2NsYXNzJzonY29sLXhzLTkgY29sLXNtLTEwIHNlYXJjaC1jb250ZW50J30pCiAgZm9yIGkgaW4gaHNsOgogICAgdGl0PWkuZmluZCgnYScseydyZWwnOidib29rbWFyayd9KQogICAgaW5mb1sndGl0bGUnXS5hcHBlbmQoKHRpdC50ZXh0LCB0aXRbJ2hyZWYnXSkpCiAgaWYgbGVuKGluZm9bJ3RpdGxlJ10pID09IDA6CiAgICBwcmludCgiVGlkYWsgZGFwYXQgbWVuZW11a2FuIGp1ZHVsIGZpbG0iKQogICAgcmV0dXJuIFRydWUKICAKICBwcmludCgiXG5cdFsgUmVzdWx0IF0iKQogIGZvciB4IGluIGluZm9bJ3RpdGxlJ106CiAgICBwcmludChmIntjfS4ge3hbMF19IikKICAgIGMrPTEKCiAgcGlsPWludChpbnB1dCgiXz4gcGlsaWg6ICIpKQogIGlmIHBpbCA8PSAwOgogICAgcHJpbnQoImluZGV4IG91dCBvZiByYW5nZXMiKQogICAgcmV0dXJuIFRydWUKCiAgcHJpbnQoIiAqQnlwYXNzaW5nLCBwbGVhc2Ugd2FpdC4uLiIpCiAgYnlwYXNzKGluZm9bJ3RpdGxlJ11bcGlsLTFdWzFdLCBpbmZvWyd0aXRsZSddW3BpbC0xXVswXSkKCmRlZiBieXBhc3ModXJsLGp1ZHVsKToKICBjYz0xCiAgcmVxPXNlcy5nZXQodXJsKQogIGJzPUJzKHJlcS50ZXh0LCAnaHRtbC5wYXJzZXInKQogIGxpbms9YnMuZmluZCgnYScseydjbGFzcyc6J2J0biBidG4tc3VjY2Vzcyd9KVsnaHJlZiddCiMgIHByaW50KGxpbmspCgogIHJlcTI9c2VzLmdldChsaW5rKQogIHJnPXJlLmZpbmRhbGwocic8ZnJhbWUgc3JjPSIoLiopIj4nLHJlcTIudGV4dClbMF0KIyAgcHJpbnQocmcpCgogIGJsaW49bGluay5zcGxpdCgnLycpWzJdCiAgcmVxMz1zZXMuZ2V0KGYiaHR0cDovL3tibGlufXtyZ30iKQogIGJzMj1CcyhyZXEzLnRleHQsICdodG1sLnBhcnNlcicpCiAgbGluazI9YnMyLmZpbmQoJ2EnLHsndGFyZ2V0JzonX3BhcmVudCd9KVsnaHJlZiddCiMgIHByaW50KGxpbmsyKQoKICByZXE0PXNlcy5nZXQobGluazIpCiAgcmcyPXJlLmZpbmRhbGwocidwb3N0XCgiKC4qPykiLCB7JyxyZXE0LnRleHQpWzBdCiMgIHByaW50KHJnMikKCiAgYmxpbjI9cmVxNC51cmwuc3BsaXQoJy8nKVsyXQogIGhlYWQ9ewogICdIb3N0JzpibGluMiwKICAnYWNjZXB0JzonKi8qJywKICAnb3JpZ2luJzpmJ2h0dHA6Ly97YmxpbjJ9JywKICAneC1yZXF1ZXN0ZWQtd2l0aCc6J1hNTEh0dHBSZXF1ZXN0JywKICAndXNlci1hZ2VudCc6J01vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS83NC4wLjM3MjkuMTY5IFNhZmFyaS81MzcuMzYnLAogICdjb250ZW50LXR5cGUnOidhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNlcj1VVEYtOCcsCiAgJ3JlZmVyZXInOmxpbmsyLAogICdhY2NlcHQtZW5jb2RpbmcnOidnemlwLCBkZWZsYXRlLCBicicsCiAgJ2FjY2VwdC1sYW5ndWFnZSc6J2lkLUlELGlkO3E9MC45LGVuLVVTO3E9MC44LGVuO3E9MC43JywKICB9CiAgcmVxNT1zZXMucG9zdChmImh0dHA6Ly97YmxpbjJ9e3JnMn0iLGhlYWRlcnM9aGVhZCkKICB0cnk6CiAgICByZzM9cmUuZmluZGFsbChyJ2h0dHBzOi8vbGF5YXJrYWNheHhpLm9yZy9mLyguKj8pIicscmVxNS50ZXh0KVswXQogIGV4Y2VwdDoKICAgIHByaW50KCJcbiAhRmFpbGVkIHRvIGJ5cGFzcyIpCiAgICB0YW49aW5wdXQoIls/XSBBbmRhIGluZ2luIG1lbGFuanV0a2FubnlhIGtlIHdlYnNpdGUgbGF5YXJrYWNhMjEgKHkvbikgIikKICAgIGlmIHRhbi5sb3dlcigpID09ICd5JzoKICAgICAgY2xpY2subGF1bmNoKGluZm9bJ3RpdGxlJ11bcGlsLTFdWzFdKQogICAgZWxzZToKICAgICAgc3lzLmV4aXQoIm9rYXkgYnllIGJ5ZToqIikKIyAgcHJpbnQocmczKQoKICByZXE2PXNlcy5nZXQoZidodHRwczovL2xheWFya2FjYXh4aS5vcmcvZi97cmczfScpCiAgdHJ5OgogICAgcmc0PXJlLmZpbmRhbGwociJwb3N0XCgnKC4qPyknLCAiLHJlcTYudGV4dClbMF0KICBleGNlcHQ6CiAgICByYWlzZSBFeGNlcHRpb24oIlxuRENNQVRha2Vkb3duOiBWaWRlbyB0aWRhayB0ZXJzZWRpYSIpCiMgIHByaW50KHJnNCkKCiAgcmVxNz1zZXMucG9zdChmJ2h0dHBzOi8vbGF5YXJrYWNheHhpLm9yZ3tyZzR9JykKICBqcz1qc29uLmxvYWRzKHJlcTcudGV4dCkKCiAgcHJpbnQoIlxuXHRbIFJlc3VsdXRpb24gXSIpCiAgZm9yIHggaW4ganNbJ2RhdGEnXToKICAgIHByaW50KGYie2NjfS4ge3hbJ2xhYmVsJ119IikKICAgIGNjKz0xCgogIGxpaD1pbnQoaW5wdXQoIl8+IHBpbGloOiAiKSkKICBpZiBsaWggPD0gMDoKICAgIHByaW50KCJpbmRleCBvdXQgb2YgcmFuZ2VzIikKICAgIHJldHVybiBUcnVlCgogIGRvd25sZDIoanNbJ2RhdGEnXVtsaWgtMV1bJ2ZpbGUnXSwgZiJ7anVkdWx9IHtqc1snZGF0YSddW2xpaC0xXVsnbGFiZWwnXX0iKQoKZGVmIGRvd25sZDIodXJsLGp1ZHVsKToKICByID0gc2VzLmdldCh1cmwsIHN0cmVhbT1UcnVlKQogIHRvdGFsX3NpemUgPSBpbnQoci5oZWFkZXJzLmdldCgnY29udGVudC1sZW5ndGgnLCAwKSkKICBwcmludChmIlxuIyBEb3dubG9hZGluZyB7anVkdWx9IikKICBwcmludChmIlsne3VybH0nXSIpCiAgYmxvY2tfc2l6ZSA9IDEwMjQKICB0PXRxZG0odG90YWw9dG90YWxfc2l6ZSwgdW5pdD0naUInLCB1bml0X3NjYWxlPVRydWUpCiAgd2l0aCBvcGVuKGYncmVzdWx0L3tqdWR1bC5yZXBsYWNlKCIvIiwiLCIpfS5tcDQnLCd3YicpIGFzIGY6CiAgICBmb3IgZGF0YSBpbiByLml0ZXJfY29udGVudChjaHVua19zaXplPWJsb2NrX3NpemUpOgogICAgICBpZiBkYXRhOgogICAgICAgIHQudXBkYXRlKGxlbihkYXRhKSkKICAgICAgICBmLndyaXRlKGRhdGEpCiAgdC5jbG9zZSgpCiAgaWYgdG90YWxfc2l6ZSAhPSAwIGFuZCB0Lm4gIT0gdG90YWxfc2l6ZToKICAgIHByaW50KCJcbltXYXJuXSBEb3dubG9hZCBHQUdBTCIpCiAgICB0YW49aW5wdXQoIls/XSBhbmRhIGluZ2luIG1lbGFuanV0a2FubnlhIGtlIHdlYnNpdGUgbGF5YXJrYWNhMjEgKHkvbikgIikKICAgIGlmIHRhbi5sb3dlcigpID09ICd5JzoKICAgICAgY2xpY2subGF1bmNoKGluZm9bJ3RpdGxlJ11bcGlsLTFdWzFdKQogICAgZWxzZToKICAgICAgc3lzLmV4aXQoIm9rYXkgYnllIGJ5ZToqIikKICBwcmludCgnXG5bT0tdIEZpbGUgc2F2ZWQgaW4gcmVzdWx0XG4nKQoKaWYgX19uYW1lX18gPT0gIl9fbWFpbl9fIjoKICBvcy5zeXN0ZW0oJ2NsZWFyJykKICBwcmludCgiIiIKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwojICAgICAgICAgICAgICBbVE9PTFMgTEsyMSBET1dOTE9BREVSXSAgICAgICAgICAgICAjCiMgX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fICMgICAgICAgICAgICAgICAgCiMgIEF1dGhvciAgIDogWjRtM1gtSUQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICMKIyAgVGVhbSAgICAgOiBTWU5ESUNBVEUgQUxBUyBST0JBTiAgICAgICAgICAgICAgICAgIwojICBHaXRodWIgICA6IGh0dHBzOi8vZ2l0aHViLmNvbS9aNG0zWC1JRCAgICAgICAgICAjCiMgIEZhY2Vib29rIDogaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL3JhZnpvbmsuc2VjICMKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwoiIiIpCiAgdHJ5OgogICAgb3MubWtkaXIoJ3Jlc3VsdCcpCiAgZXhjZXB0OiBwYXNzCgogIHRyeToKICAgIHF1ZT1pbnB1dCgicXVlcnkgc2VhcmNoOiAiKQogICAgc2VhcmNoKHF1ZSkKICBleGNlcHQgRXhjZXB0aW9uIGFzIEVycjoKICAgIHByaW50KEVycik='))
